import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

describe("Test credential atomic query", function () {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits/query", "credentialJsonLDAtomicQueryMTPTest.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    it("test credentialJsonLDAtomicQueryMTP", async () => {

        // inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test TestJsonLDAtomicQuery_PrepareInputs)
        const inputs = {"userAuthClaim":["304427537360709784173770334266246861770","0","17640206035128972995519606214765283372613874593503528180869261482403155458945","20634138280259599560273310290025659992320584624461316485434108770067472477956","15930428023331155902","0","0","0"],"userAuthClaimMtp":["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"userAuthClaimNonRevMtp":["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"userAuthClaimNonRevMtpAuxHi":"0","userAuthClaimNonRevMtpAuxHv":"0","userAuthClaimNonRevMtpNoAux":"1","userClaimsTreeRoot":"9763429684850732628215303952870004997159843236039795272605841029866455670219","userState":"18656147546666944484453899241916469544090258810192803949522794490493271005313","userRevTreeRoot":"0","userRootsTreeRoot":"0","userID":"379949150130214723420589610911161895495647789006649785264738141299135414272","challenge":"1","challengeSignatureR8x":"8553678144208642175027223770335048072652078621216414881653012537434846327449","challengeSignatureR8y":"5507837342589329113352496188906367161790372084365285966741761856353367255709","challengeSignatureS":"2093461910575977345603199789919760192811763972089699387324401771367839603655","issuerClaim":["3583233690122716044519380227940806650830","379949150130214723420589610911161895495647789006649785264738141299135414272","17568057213828477233507447080689055308823020388972334380526849356111335110900","0","30803922965249841627828060161","0","0","0"],"issuerClaimClaimsTreeRoot":"365705863199551734267967786157709037963347029160851330117562455870138327439","issuerClaimIdenState":"16993161227479379075495985698325116578679629820096885930185446225558281870528","issuerClaimMtp":["0","18337129644116656308842422695567930755039142442806278977230099338026575870840","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"issuerClaimRevTreeRoot":"11955236168039024258206152167718595733300625004351440056586716560060653311750","issuerClaimRootsTreeRoot":"0","issuerClaimNonRevClaimsTreeRoot":"365705863199551734267967786157709037963347029160851330117562455870138327439","issuerClaimNonRevRevTreeRoot":"11955236168039024258206152167718595733300625004351440056586716560060653311750","issuerClaimNonRevRootsTreeRoot":"0","issuerClaimNonRevState":"16993161227479379075495985698325116578679629820096885930185446225558281870528","issuerClaimNonRevMtp":["16893244256367465864542014032080213413654599301942077056250173615273598292583","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"issuerClaimNonRevMtpAuxHi":"3","issuerClaimNonRevMtpAuxHv":"0","issuerClaimNonRevMtpNoAux":"0","claimSchema":"180410020913331409885634153623124536270","issuerID":"26599707002460144379092755370384635496563807452878989192352627271768342528","claimPathNotExists":0,"claimPathMtp":["11910293038428617741524804146372123460316909087472110224310684293437832969164","16177004431687368818113912782442107150203001063591538107922536599846633952045","2273332527522244458085120870407367354166812099476912338970230154990132783303","13192918401641087849642106777397606986912934444326373440658673644787217670633","7168654565749461589078377009464061974077279404969163913984304601783416740392","14271173073428930573422493938722323454218890711784989528150404024814136007165","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"claimPathMtpNoAux":"0","claimPathMtpAuxHi":"0","claimPathMtpAuxHv":"0","claimPathKey":"14893038329526541210094612673793094547542854832994245253710267888299004292355","claimPathValue":"83627465","operator":1,"timestamp":"1642074362","value":["83627465","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"]}
        const expOut = {
            challenge: "1",
            userID: "379949150130214723420589610911161895495647789006649785264738141299135414272",
            claimSchema: "180410020913331409885634153623124536270",
            userState: "18656147546666944484453899241916469544090258810192803949522794490493271005313",
            issuerClaimIdenState: "16993161227479379075495985698325116578679629820096885930185446225558281870528",
            issuerClaimNonRevState: "16993161227479379075495985698325116578679629820096885930185446225558281870528",
            operator: "1",
            timestamp: "1642074362",
            issuerID: "26599707002460144379092755370384635496563807452878989192352627271768342528",
            claimPathKey: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
            value: ["83627465", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],

        }
        const w = await circuit.calculateWitness(inputs, true);
        await circuit.checkConstraints(w);
        await circuit.assertOut(w, expOut);
    })
    ;
})
;
