import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;

// inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test)
describe("sybilTest.circom:", async function() {

    const tests = [
        {
            "desc": "Sybil resistance - Happy flow test",
            "expOut": {
                "userID": "25488971158629062708211589022720088934000314791497875911489989686829383681"
            },
            "inputs": {
                "profileNonce": "10",
                "expectedUserId" : 20,
                "userGenesisID": "19104853439462320209059061537253618984153217267677512271018416655565783041"
            }
        }
    ];

    let circuit;
    this.timeout(300000)

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits", "sybilTest.circom"),
            {
                output: path.join(__dirname, "../circuits", "build/sybil"),
                recompile: true,
                reduceConstraints: false,
            },
        );
    });

    tests.forEach(({desc, inputs, expOut}) => {
        it(`auth ${desc}`, async function() {
            const w = await circuit.calculateWitness(inputs, true);
            await circuit.checkConstraints(w);
            await circuit.assertOut(w, expOut);
        });
    });
});
